package controller;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import model.kioskapp.ordertransaction.OrderTransaction;


public class OrderTransactionController {

	private DatabaseConnection db;

	public OrderTransactionController(){
		db = new DatabaseConnection();
	}

	
	// To insert transaction detail into database and get the auto generate transaction id
		@SuppressWarnings("resource")
		public OrderTransaction insertTransaction(OrderTransaction orderTransaction){
		
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		int status =0;
       
		String sql	="INSERT INTO ordertransaction (TransactionDate, `Order`, AmountCharged, "
					+ "TransactionStatus, Last4Digits, OrderMode )"
					+ "VALUES (LOCALTIMESTAMP(),?, ?, ?, ?, ?);";

		try{
			conn = db.getConnection();
			ps = conn.prepareStatement(sql);
			ps.setInt(1, orderTransaction.getOrder().getOrderId());
			ps.setFloat(2, orderTransaction.getAmountCharged());
	
			if (orderTransaction.isTransactionStatus())
				ps.setInt(3, 1);
            else
                 ps.setInt(3, 0);
            ps.setInt(4, orderTransaction.getLast4Digits());
            ps.setString(5,orderTransaction.getOrderMode());
            status = ps.executeUpdate();
            

            if(status!=0){   
            	
            	// To get the order transaction id generated by database to generate receipt
                sql = "SELECT OrderTransactionId,TransactionDate FROM ordertransaction";
                
                // To allow cursor to move from front and back
                 ps = conn.prepareStatement(sql,ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE );
                 rs = ps.executeQuery();
                 
                 // Move cursor to the last row of the table
                 rs.afterLast();
                 if(rs.previous()) {
                	 orderTransaction.setOrderTransactionId(rs.getInt(1));
                	 orderTransaction.setTransactioDate(rs.getDate(2) );
                 }
                 

            }         

        }catch(Exception e){
        	e.printStackTrace();
        }
        finally{
           
				try {
					 	if (ps!= null)
					 		ps.close();
					 	if (rs!=null)
		             	  rs.close();
					 	if(conn!=null)
					 		conn.close();  
					 	
				} catch (SQLException e) {
					
					e.printStackTrace();
				}
                 	
        }
        return orderTransaction;
	}
}
